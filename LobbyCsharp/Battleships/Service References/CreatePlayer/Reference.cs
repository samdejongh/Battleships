//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Battleships.CreatePlayer {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OPlayer", Namespace="http://schemas.datacontract.org/2004/07/LobbyCsharp.Web.DTO")]
    public partial class OPlayer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int PlayerIdField;
        
        private string PlayerNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerName {
            get {
                return this.PlayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerNameField, value) != true)) {
                    this.PlayerNameField = value;
                    this.RaisePropertyChanged("PlayerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CreatePlayer.ICreateplayer")]
    public interface ICreateplayer {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICreateplayer/GetAllPlayers", ReplyAction="http://tempuri.org/ICreateplayer/GetAllPlayersResponse")]
        System.IAsyncResult BeginGetAllPlayers(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Battleships.CreatePlayer.OPlayer> EndGetAllPlayers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICreateplayer/AddNewPlayer", ReplyAction="http://tempuri.org/ICreateplayer/AddNewPlayerResponse")]
        System.IAsyncResult BeginAddNewPlayer(int PlayerId, string PlayerName, System.AsyncCallback callback, object asyncState);
        
        void EndAddNewPlayer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICreateplayer/NewId", ReplyAction="http://tempuri.org/ICreateplayer/NewIdResponse")]
        System.IAsyncResult BeginNewId(System.AsyncCallback callback, object asyncState);
        
        int EndNewId(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICreateplayerChannel : Battleships.CreatePlayer.ICreateplayer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllPlayersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllPlayersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Battleships.CreatePlayer.OPlayer> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Battleships.CreatePlayer.OPlayer>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NewIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateplayerClient : System.ServiceModel.ClientBase<Battleships.CreatePlayer.ICreateplayer>, Battleships.CreatePlayer.ICreateplayer {
        
        private BeginOperationDelegate onBeginGetAllPlayersDelegate;
        
        private EndOperationDelegate onEndGetAllPlayersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllPlayersCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNewPlayerDelegate;
        
        private EndOperationDelegate onEndAddNewPlayerDelegate;
        
        private System.Threading.SendOrPostCallback onAddNewPlayerCompletedDelegate;
        
        private BeginOperationDelegate onBeginNewIdDelegate;
        
        private EndOperationDelegate onEndNewIdDelegate;
        
        private System.Threading.SendOrPostCallback onNewIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CreateplayerClient() {
        }
        
        public CreateplayerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CreateplayerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CreateplayerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CreateplayerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAllPlayersCompletedEventArgs> GetAllPlayersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddNewPlayerCompleted;
        
        public event System.EventHandler<NewIdCompletedEventArgs> NewIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Battleships.CreatePlayer.ICreateplayer.BeginGetAllPlayers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllPlayers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Battleships.CreatePlayer.OPlayer> Battleships.CreatePlayer.ICreateplayer.EndGetAllPlayers(System.IAsyncResult result) {
            return base.Channel.EndGetAllPlayers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllPlayers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Battleships.CreatePlayer.ICreateplayer)(this)).BeginGetAllPlayers(callback, asyncState);
        }
        
        private object[] OnEndGetAllPlayers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Battleships.CreatePlayer.OPlayer> retVal = ((Battleships.CreatePlayer.ICreateplayer)(this)).EndGetAllPlayers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllPlayersCompleted(object state) {
            if ((this.GetAllPlayersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllPlayersCompleted(this, new GetAllPlayersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllPlayersAsync() {
            this.GetAllPlayersAsync(null);
        }
        
        public void GetAllPlayersAsync(object userState) {
            if ((this.onBeginGetAllPlayersDelegate == null)) {
                this.onBeginGetAllPlayersDelegate = new BeginOperationDelegate(this.OnBeginGetAllPlayers);
            }
            if ((this.onEndGetAllPlayersDelegate == null)) {
                this.onEndGetAllPlayersDelegate = new EndOperationDelegate(this.OnEndGetAllPlayers);
            }
            if ((this.onGetAllPlayersCompletedDelegate == null)) {
                this.onGetAllPlayersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllPlayersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllPlayersDelegate, null, this.onEndGetAllPlayersDelegate, this.onGetAllPlayersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Battleships.CreatePlayer.ICreateplayer.BeginAddNewPlayer(int PlayerId, string PlayerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNewPlayer(PlayerId, PlayerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Battleships.CreatePlayer.ICreateplayer.EndAddNewPlayer(System.IAsyncResult result) {
            base.Channel.EndAddNewPlayer(result);
        }
        
        private System.IAsyncResult OnBeginAddNewPlayer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int PlayerId = ((int)(inValues[0]));
            string PlayerName = ((string)(inValues[1]));
            return ((Battleships.CreatePlayer.ICreateplayer)(this)).BeginAddNewPlayer(PlayerId, PlayerName, callback, asyncState);
        }
        
        private object[] OnEndAddNewPlayer(System.IAsyncResult result) {
            ((Battleships.CreatePlayer.ICreateplayer)(this)).EndAddNewPlayer(result);
            return null;
        }
        
        private void OnAddNewPlayerCompleted(object state) {
            if ((this.AddNewPlayerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNewPlayerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNewPlayerAsync(int PlayerId, string PlayerName) {
            this.AddNewPlayerAsync(PlayerId, PlayerName, null);
        }
        
        public void AddNewPlayerAsync(int PlayerId, string PlayerName, object userState) {
            if ((this.onBeginAddNewPlayerDelegate == null)) {
                this.onBeginAddNewPlayerDelegate = new BeginOperationDelegate(this.OnBeginAddNewPlayer);
            }
            if ((this.onEndAddNewPlayerDelegate == null)) {
                this.onEndAddNewPlayerDelegate = new EndOperationDelegate(this.OnEndAddNewPlayer);
            }
            if ((this.onAddNewPlayerCompletedDelegate == null)) {
                this.onAddNewPlayerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNewPlayerCompleted);
            }
            base.InvokeAsync(this.onBeginAddNewPlayerDelegate, new object[] {
                        PlayerId,
                        PlayerName}, this.onEndAddNewPlayerDelegate, this.onAddNewPlayerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Battleships.CreatePlayer.ICreateplayer.BeginNewId(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNewId(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Battleships.CreatePlayer.ICreateplayer.EndNewId(System.IAsyncResult result) {
            return base.Channel.EndNewId(result);
        }
        
        private System.IAsyncResult OnBeginNewId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Battleships.CreatePlayer.ICreateplayer)(this)).BeginNewId(callback, asyncState);
        }
        
        private object[] OnEndNewId(System.IAsyncResult result) {
            int retVal = ((Battleships.CreatePlayer.ICreateplayer)(this)).EndNewId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNewIdCompleted(object state) {
            if ((this.NewIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NewIdCompleted(this, new NewIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NewIdAsync() {
            this.NewIdAsync(null);
        }
        
        public void NewIdAsync(object userState) {
            if ((this.onBeginNewIdDelegate == null)) {
                this.onBeginNewIdDelegate = new BeginOperationDelegate(this.OnBeginNewId);
            }
            if ((this.onEndNewIdDelegate == null)) {
                this.onEndNewIdDelegate = new EndOperationDelegate(this.OnEndNewId);
            }
            if ((this.onNewIdCompletedDelegate == null)) {
                this.onNewIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNewIdCompleted);
            }
            base.InvokeAsync(this.onBeginNewIdDelegate, null, this.onEndNewIdDelegate, this.onNewIdCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Battleships.CreatePlayer.ICreateplayer CreateChannel() {
            return new CreateplayerClientChannel(this);
        }
        
        private class CreateplayerClientChannel : ChannelBase<Battleships.CreatePlayer.ICreateplayer>, Battleships.CreatePlayer.ICreateplayer {
            
            public CreateplayerClientChannel(System.ServiceModel.ClientBase<Battleships.CreatePlayer.ICreateplayer> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAllPlayers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllPlayers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Battleships.CreatePlayer.OPlayer> EndGetAllPlayers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Battleships.CreatePlayer.OPlayer> _result = ((System.Collections.ObjectModel.ObservableCollection<Battleships.CreatePlayer.OPlayer>)(base.EndInvoke("GetAllPlayers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddNewPlayer(int PlayerId, string PlayerName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = PlayerId;
                _args[1] = PlayerName;
                System.IAsyncResult _result = base.BeginInvoke("AddNewPlayer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddNewPlayer(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddNewPlayer", _args, result);
            }
            
            public System.IAsyncResult BeginNewId(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("NewId", _args, callback, asyncState);
                return _result;
            }
            
            public int EndNewId(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("NewId", _args, result)));
                return _result;
            }
        }
    }
}
