//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace LobbyCsharp.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OLobby", Namespace="http://schemas.datacontract.org/2004/07/LobbyCsharp.Web.DTO")]
    public partial class OLobby : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int LobbyIdField;
        
        private string LobbyNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LobbyId {
            get {
                return this.LobbyIdField;
            }
            set {
                if ((this.LobbyIdField.Equals(value) != true)) {
                    this.LobbyIdField = value;
                    this.RaisePropertyChanged("LobbyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LobbyName {
            get {
                return this.LobbyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LobbyNameField, value) != true)) {
                    this.LobbyNameField = value;
                    this.RaisePropertyChanged("LobbyName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OPlayer", Namespace="http://schemas.datacontract.org/2004/07/LobbyCsharp.Web.DTO")]
    public partial class OPlayer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int PlayerIdField;
        
        private string PlayerNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerName {
            get {
                return this.PlayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerNameField, value) != true)) {
                    this.PlayerNameField = value;
                    this.RaisePropertyChanged("PlayerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OLobbyRoom", Namespace="http://schemas.datacontract.org/2004/07/LobbyCsharp.Web.DTO")]
    public partial class OLobbyRoom : object, System.ComponentModel.INotifyPropertyChanged {
        
        private LobbyCsharp.ServiceReference1.OPlayer hostPlayerField;
        
        private System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OPlayer> playerListField;
        
        private LobbyCsharp.ServiceReference1.OLobby theLobbyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LobbyCsharp.ServiceReference1.OPlayer hostPlayer {
            get {
                return this.hostPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.hostPlayerField, value) != true)) {
                    this.hostPlayerField = value;
                    this.RaisePropertyChanged("hostPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OPlayer> playerList {
            get {
                return this.playerListField;
            }
            set {
                if ((object.ReferenceEquals(this.playerListField, value) != true)) {
                    this.playerListField = value;
                    this.RaisePropertyChanged("playerList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LobbyCsharp.ServiceReference1.OLobby theLobby {
            get {
                return this.theLobbyField;
            }
            set {
                if ((object.ReferenceEquals(this.theLobbyField, value) != true)) {
                    this.theLobbyField = value;
                    this.RaisePropertyChanged("theLobby");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameObject", Namespace="http://schemas.datacontract.org/2004/07/LobbyCsharp.Web.DTO")]
    public partial class GameObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ILobbyService")]
    public interface ILobbyService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILobbyService/GetAvailableRooms", ReplyAction="http://tempuri.org/ILobbyService/GetAvailableRoomsResponse")]
        System.IAsyncResult BeginGetAvailableRooms(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobby> EndGetAvailableRooms(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILobbyService/CreatePlayLobby", ReplyAction="http://tempuri.org/ILobbyService/CreatePlayLobbyResponse")]
        System.IAsyncResult BeginCreatePlayLobby(LobbyCsharp.ServiceReference1.OPlayer host, int lobby, System.AsyncCallback callback, object asyncState);
        
        void EndCreatePlayLobby(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILobbyService/GetAvailableLobbyRooms", ReplyAction="http://tempuri.org/ILobbyService/GetAvailableLobbyRoomsResponse")]
        System.IAsyncResult BeginGetAvailableLobbyRooms(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobbyRoom> EndGetAvailableLobbyRooms(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILobbyService/SubscribeToLobbyRoom", ReplyAction="http://tempuri.org/ILobbyService/SubscribeToLobbyRoomResponse")]
        System.IAsyncResult BeginSubscribeToLobbyRoom(LobbyCsharp.ServiceReference1.OPlayer player, int lobby, int host, System.AsyncCallback callback, object asyncState);
        
        void EndSubscribeToLobbyRoom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILobbyService/StartPlay", ReplyAction="http://tempuri.org/ILobbyService/StartPlayResponse")]
        System.IAsyncResult BeginStartPlay(LobbyCsharp.ServiceReference1.OPlayer hostPlayer, System.AsyncCallback callback, object asyncState);
        
        void EndStartPlay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILobbyService/GetPlayer", ReplyAction="http://tempuri.org/ILobbyService/GetPlayerResponse")]
        System.IAsyncResult BeginGetPlayer(int id, System.AsyncCallback callback, object asyncState);
        
        LobbyCsharp.ServiceReference1.OPlayer EndGetPlayer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILobbyService/SendGameUpdate", ReplyAction="http://tempuri.org/ILobbyService/SendGameUpdateResponse")]
        System.IAsyncResult BeginSendGameUpdate(LobbyCsharp.ServiceReference1.OPlayer player, System.AsyncCallback callback, object asyncState);
        
        LobbyCsharp.ServiceReference1.GameObject EndSendGameUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILobbyService/GetAllPlayers", ReplyAction="http://tempuri.org/ILobbyService/GetAllPlayersResponse")]
        System.IAsyncResult BeginGetAllPlayers(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetAllPlayers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILobbyService/AddNewPlayer", ReplyAction="http://tempuri.org/ILobbyService/AddNewPlayerResponse")]
        System.IAsyncResult BeginAddNewPlayer(int PlayerId, string PlayerName, System.AsyncCallback callback, object asyncState);
        
        void EndAddNewPlayer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILobbyService/NewId", ReplyAction="http://tempuri.org/ILobbyService/NewIdResponse")]
        System.IAsyncResult BeginNewId(System.AsyncCallback callback, object asyncState);
        
        int EndNewId(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceChannel : LobbyCsharp.ServiceReference1.ILobbyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAvailableRoomsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAvailableRoomsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobby> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobby>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAvailableLobbyRoomsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAvailableLobbyRoomsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobbyRoom> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobbyRoom>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPlayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPlayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LobbyCsharp.ServiceReference1.OPlayer Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LobbyCsharp.ServiceReference1.OPlayer)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendGameUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendGameUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LobbyCsharp.ServiceReference1.GameObject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LobbyCsharp.ServiceReference1.GameObject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllPlayersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllPlayersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NewIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyServiceClient : System.ServiceModel.ClientBase<LobbyCsharp.ServiceReference1.ILobbyService>, LobbyCsharp.ServiceReference1.ILobbyService {
        
        private BeginOperationDelegate onBeginGetAvailableRoomsDelegate;
        
        private EndOperationDelegate onEndGetAvailableRoomsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAvailableRoomsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreatePlayLobbyDelegate;
        
        private EndOperationDelegate onEndCreatePlayLobbyDelegate;
        
        private System.Threading.SendOrPostCallback onCreatePlayLobbyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAvailableLobbyRoomsDelegate;
        
        private EndOperationDelegate onEndGetAvailableLobbyRoomsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAvailableLobbyRoomsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscribeToLobbyRoomDelegate;
        
        private EndOperationDelegate onEndSubscribeToLobbyRoomDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeToLobbyRoomCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartPlayDelegate;
        
        private EndOperationDelegate onEndStartPlayDelegate;
        
        private System.Threading.SendOrPostCallback onStartPlayCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPlayerDelegate;
        
        private EndOperationDelegate onEndGetPlayerDelegate;
        
        private System.Threading.SendOrPostCallback onGetPlayerCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendGameUpdateDelegate;
        
        private EndOperationDelegate onEndSendGameUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onSendGameUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllPlayersDelegate;
        
        private EndOperationDelegate onEndGetAllPlayersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllPlayersCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNewPlayerDelegate;
        
        private EndOperationDelegate onEndAddNewPlayerDelegate;
        
        private System.Threading.SendOrPostCallback onAddNewPlayerCompletedDelegate;
        
        private BeginOperationDelegate onBeginNewIdDelegate;
        
        private EndOperationDelegate onEndNewIdDelegate;
        
        private System.Threading.SendOrPostCallback onNewIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LobbyServiceClient() {
        }
        
        public LobbyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LobbyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAvailableRoomsCompletedEventArgs> GetAvailableRoomsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreatePlayLobbyCompleted;
        
        public event System.EventHandler<GetAvailableLobbyRoomsCompletedEventArgs> GetAvailableLobbyRoomsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SubscribeToLobbyRoomCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartPlayCompleted;
        
        public event System.EventHandler<GetPlayerCompletedEventArgs> GetPlayerCompleted;
        
        public event System.EventHandler<SendGameUpdateCompletedEventArgs> SendGameUpdateCompleted;
        
        public event System.EventHandler<GetAllPlayersCompletedEventArgs> GetAllPlayersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddNewPlayerCompleted;
        
        public event System.EventHandler<NewIdCompletedEventArgs> NewIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyCsharp.ServiceReference1.ILobbyService.BeginGetAvailableRooms(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAvailableRooms(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobby> LobbyCsharp.ServiceReference1.ILobbyService.EndGetAvailableRooms(System.IAsyncResult result) {
            return base.Channel.EndGetAvailableRooms(result);
        }
        
        private System.IAsyncResult OnBeginGetAvailableRooms(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).BeginGetAvailableRooms(callback, asyncState);
        }
        
        private object[] OnEndGetAvailableRooms(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobby> retVal = ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).EndGetAvailableRooms(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAvailableRoomsCompleted(object state) {
            if ((this.GetAvailableRoomsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAvailableRoomsCompleted(this, new GetAvailableRoomsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAvailableRoomsAsync() {
            this.GetAvailableRoomsAsync(null);
        }
        
        public void GetAvailableRoomsAsync(object userState) {
            if ((this.onBeginGetAvailableRoomsDelegate == null)) {
                this.onBeginGetAvailableRoomsDelegate = new BeginOperationDelegate(this.OnBeginGetAvailableRooms);
            }
            if ((this.onEndGetAvailableRoomsDelegate == null)) {
                this.onEndGetAvailableRoomsDelegate = new EndOperationDelegate(this.OnEndGetAvailableRooms);
            }
            if ((this.onGetAvailableRoomsCompletedDelegate == null)) {
                this.onGetAvailableRoomsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAvailableRoomsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAvailableRoomsDelegate, null, this.onEndGetAvailableRoomsDelegate, this.onGetAvailableRoomsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyCsharp.ServiceReference1.ILobbyService.BeginCreatePlayLobby(LobbyCsharp.ServiceReference1.OPlayer host, int lobby, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreatePlayLobby(host, lobby, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LobbyCsharp.ServiceReference1.ILobbyService.EndCreatePlayLobby(System.IAsyncResult result) {
            base.Channel.EndCreatePlayLobby(result);
        }
        
        private System.IAsyncResult OnBeginCreatePlayLobby(object[] inValues, System.AsyncCallback callback, object asyncState) {
            LobbyCsharp.ServiceReference1.OPlayer host = ((LobbyCsharp.ServiceReference1.OPlayer)(inValues[0]));
            int lobby = ((int)(inValues[1]));
            return ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).BeginCreatePlayLobby(host, lobby, callback, asyncState);
        }
        
        private object[] OnEndCreatePlayLobby(System.IAsyncResult result) {
            ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).EndCreatePlayLobby(result);
            return null;
        }
        
        private void OnCreatePlayLobbyCompleted(object state) {
            if ((this.CreatePlayLobbyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreatePlayLobbyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreatePlayLobbyAsync(LobbyCsharp.ServiceReference1.OPlayer host, int lobby) {
            this.CreatePlayLobbyAsync(host, lobby, null);
        }
        
        public void CreatePlayLobbyAsync(LobbyCsharp.ServiceReference1.OPlayer host, int lobby, object userState) {
            if ((this.onBeginCreatePlayLobbyDelegate == null)) {
                this.onBeginCreatePlayLobbyDelegate = new BeginOperationDelegate(this.OnBeginCreatePlayLobby);
            }
            if ((this.onEndCreatePlayLobbyDelegate == null)) {
                this.onEndCreatePlayLobbyDelegate = new EndOperationDelegate(this.OnEndCreatePlayLobby);
            }
            if ((this.onCreatePlayLobbyCompletedDelegate == null)) {
                this.onCreatePlayLobbyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreatePlayLobbyCompleted);
            }
            base.InvokeAsync(this.onBeginCreatePlayLobbyDelegate, new object[] {
                        host,
                        lobby}, this.onEndCreatePlayLobbyDelegate, this.onCreatePlayLobbyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyCsharp.ServiceReference1.ILobbyService.BeginGetAvailableLobbyRooms(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAvailableLobbyRooms(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobbyRoom> LobbyCsharp.ServiceReference1.ILobbyService.EndGetAvailableLobbyRooms(System.IAsyncResult result) {
            return base.Channel.EndGetAvailableLobbyRooms(result);
        }
        
        private System.IAsyncResult OnBeginGetAvailableLobbyRooms(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).BeginGetAvailableLobbyRooms(callback, asyncState);
        }
        
        private object[] OnEndGetAvailableLobbyRooms(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobbyRoom> retVal = ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).EndGetAvailableLobbyRooms(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAvailableLobbyRoomsCompleted(object state) {
            if ((this.GetAvailableLobbyRoomsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAvailableLobbyRoomsCompleted(this, new GetAvailableLobbyRoomsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAvailableLobbyRoomsAsync() {
            this.GetAvailableLobbyRoomsAsync(null);
        }
        
        public void GetAvailableLobbyRoomsAsync(object userState) {
            if ((this.onBeginGetAvailableLobbyRoomsDelegate == null)) {
                this.onBeginGetAvailableLobbyRoomsDelegate = new BeginOperationDelegate(this.OnBeginGetAvailableLobbyRooms);
            }
            if ((this.onEndGetAvailableLobbyRoomsDelegate == null)) {
                this.onEndGetAvailableLobbyRoomsDelegate = new EndOperationDelegate(this.OnEndGetAvailableLobbyRooms);
            }
            if ((this.onGetAvailableLobbyRoomsCompletedDelegate == null)) {
                this.onGetAvailableLobbyRoomsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAvailableLobbyRoomsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAvailableLobbyRoomsDelegate, null, this.onEndGetAvailableLobbyRoomsDelegate, this.onGetAvailableLobbyRoomsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyCsharp.ServiceReference1.ILobbyService.BeginSubscribeToLobbyRoom(LobbyCsharp.ServiceReference1.OPlayer player, int lobby, int host, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribeToLobbyRoom(player, lobby, host, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LobbyCsharp.ServiceReference1.ILobbyService.EndSubscribeToLobbyRoom(System.IAsyncResult result) {
            base.Channel.EndSubscribeToLobbyRoom(result);
        }
        
        private System.IAsyncResult OnBeginSubscribeToLobbyRoom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            LobbyCsharp.ServiceReference1.OPlayer player = ((LobbyCsharp.ServiceReference1.OPlayer)(inValues[0]));
            int lobby = ((int)(inValues[1]));
            int host = ((int)(inValues[2]));
            return ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).BeginSubscribeToLobbyRoom(player, lobby, host, callback, asyncState);
        }
        
        private object[] OnEndSubscribeToLobbyRoom(System.IAsyncResult result) {
            ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).EndSubscribeToLobbyRoom(result);
            return null;
        }
        
        private void OnSubscribeToLobbyRoomCompleted(object state) {
            if ((this.SubscribeToLobbyRoomCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeToLobbyRoomCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeToLobbyRoomAsync(LobbyCsharp.ServiceReference1.OPlayer player, int lobby, int host) {
            this.SubscribeToLobbyRoomAsync(player, lobby, host, null);
        }
        
        public void SubscribeToLobbyRoomAsync(LobbyCsharp.ServiceReference1.OPlayer player, int lobby, int host, object userState) {
            if ((this.onBeginSubscribeToLobbyRoomDelegate == null)) {
                this.onBeginSubscribeToLobbyRoomDelegate = new BeginOperationDelegate(this.OnBeginSubscribeToLobbyRoom);
            }
            if ((this.onEndSubscribeToLobbyRoomDelegate == null)) {
                this.onEndSubscribeToLobbyRoomDelegate = new EndOperationDelegate(this.OnEndSubscribeToLobbyRoom);
            }
            if ((this.onSubscribeToLobbyRoomCompletedDelegate == null)) {
                this.onSubscribeToLobbyRoomCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeToLobbyRoomCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeToLobbyRoomDelegate, new object[] {
                        player,
                        lobby,
                        host}, this.onEndSubscribeToLobbyRoomDelegate, this.onSubscribeToLobbyRoomCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyCsharp.ServiceReference1.ILobbyService.BeginStartPlay(LobbyCsharp.ServiceReference1.OPlayer hostPlayer, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartPlay(hostPlayer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LobbyCsharp.ServiceReference1.ILobbyService.EndStartPlay(System.IAsyncResult result) {
            base.Channel.EndStartPlay(result);
        }
        
        private System.IAsyncResult OnBeginStartPlay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            LobbyCsharp.ServiceReference1.OPlayer hostPlayer = ((LobbyCsharp.ServiceReference1.OPlayer)(inValues[0]));
            return ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).BeginStartPlay(hostPlayer, callback, asyncState);
        }
        
        private object[] OnEndStartPlay(System.IAsyncResult result) {
            ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).EndStartPlay(result);
            return null;
        }
        
        private void OnStartPlayCompleted(object state) {
            if ((this.StartPlayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartPlayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartPlayAsync(LobbyCsharp.ServiceReference1.OPlayer hostPlayer) {
            this.StartPlayAsync(hostPlayer, null);
        }
        
        public void StartPlayAsync(LobbyCsharp.ServiceReference1.OPlayer hostPlayer, object userState) {
            if ((this.onBeginStartPlayDelegate == null)) {
                this.onBeginStartPlayDelegate = new BeginOperationDelegate(this.OnBeginStartPlay);
            }
            if ((this.onEndStartPlayDelegate == null)) {
                this.onEndStartPlayDelegate = new EndOperationDelegate(this.OnEndStartPlay);
            }
            if ((this.onStartPlayCompletedDelegate == null)) {
                this.onStartPlayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartPlayCompleted);
            }
            base.InvokeAsync(this.onBeginStartPlayDelegate, new object[] {
                        hostPlayer}, this.onEndStartPlayDelegate, this.onStartPlayCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyCsharp.ServiceReference1.ILobbyService.BeginGetPlayer(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPlayer(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LobbyCsharp.ServiceReference1.OPlayer LobbyCsharp.ServiceReference1.ILobbyService.EndGetPlayer(System.IAsyncResult result) {
            return base.Channel.EndGetPlayer(result);
        }
        
        private System.IAsyncResult OnBeginGetPlayer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).BeginGetPlayer(id, callback, asyncState);
        }
        
        private object[] OnEndGetPlayer(System.IAsyncResult result) {
            LobbyCsharp.ServiceReference1.OPlayer retVal = ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).EndGetPlayer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPlayerCompleted(object state) {
            if ((this.GetPlayerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPlayerCompleted(this, new GetPlayerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPlayerAsync(int id) {
            this.GetPlayerAsync(id, null);
        }
        
        public void GetPlayerAsync(int id, object userState) {
            if ((this.onBeginGetPlayerDelegate == null)) {
                this.onBeginGetPlayerDelegate = new BeginOperationDelegate(this.OnBeginGetPlayer);
            }
            if ((this.onEndGetPlayerDelegate == null)) {
                this.onEndGetPlayerDelegate = new EndOperationDelegate(this.OnEndGetPlayer);
            }
            if ((this.onGetPlayerCompletedDelegate == null)) {
                this.onGetPlayerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPlayerCompleted);
            }
            base.InvokeAsync(this.onBeginGetPlayerDelegate, new object[] {
                        id}, this.onEndGetPlayerDelegate, this.onGetPlayerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyCsharp.ServiceReference1.ILobbyService.BeginSendGameUpdate(LobbyCsharp.ServiceReference1.OPlayer player, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendGameUpdate(player, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LobbyCsharp.ServiceReference1.GameObject LobbyCsharp.ServiceReference1.ILobbyService.EndSendGameUpdate(System.IAsyncResult result) {
            return base.Channel.EndSendGameUpdate(result);
        }
        
        private System.IAsyncResult OnBeginSendGameUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            LobbyCsharp.ServiceReference1.OPlayer player = ((LobbyCsharp.ServiceReference1.OPlayer)(inValues[0]));
            return ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).BeginSendGameUpdate(player, callback, asyncState);
        }
        
        private object[] OnEndSendGameUpdate(System.IAsyncResult result) {
            LobbyCsharp.ServiceReference1.GameObject retVal = ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).EndSendGameUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendGameUpdateCompleted(object state) {
            if ((this.SendGameUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendGameUpdateCompleted(this, new SendGameUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendGameUpdateAsync(LobbyCsharp.ServiceReference1.OPlayer player) {
            this.SendGameUpdateAsync(player, null);
        }
        
        public void SendGameUpdateAsync(LobbyCsharp.ServiceReference1.OPlayer player, object userState) {
            if ((this.onBeginSendGameUpdateDelegate == null)) {
                this.onBeginSendGameUpdateDelegate = new BeginOperationDelegate(this.OnBeginSendGameUpdate);
            }
            if ((this.onEndSendGameUpdateDelegate == null)) {
                this.onEndSendGameUpdateDelegate = new EndOperationDelegate(this.OnEndSendGameUpdate);
            }
            if ((this.onSendGameUpdateCompletedDelegate == null)) {
                this.onSendGameUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendGameUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginSendGameUpdateDelegate, new object[] {
                        player}, this.onEndSendGameUpdateDelegate, this.onSendGameUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyCsharp.ServiceReference1.ILobbyService.BeginGetAllPlayers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllPlayers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> LobbyCsharp.ServiceReference1.ILobbyService.EndGetAllPlayers(System.IAsyncResult result) {
            return base.Channel.EndGetAllPlayers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllPlayers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).BeginGetAllPlayers(callback, asyncState);
        }
        
        private object[] OnEndGetAllPlayers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).EndGetAllPlayers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllPlayersCompleted(object state) {
            if ((this.GetAllPlayersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllPlayersCompleted(this, new GetAllPlayersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllPlayersAsync() {
            this.GetAllPlayersAsync(null);
        }
        
        public void GetAllPlayersAsync(object userState) {
            if ((this.onBeginGetAllPlayersDelegate == null)) {
                this.onBeginGetAllPlayersDelegate = new BeginOperationDelegate(this.OnBeginGetAllPlayers);
            }
            if ((this.onEndGetAllPlayersDelegate == null)) {
                this.onEndGetAllPlayersDelegate = new EndOperationDelegate(this.OnEndGetAllPlayers);
            }
            if ((this.onGetAllPlayersCompletedDelegate == null)) {
                this.onGetAllPlayersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllPlayersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllPlayersDelegate, null, this.onEndGetAllPlayersDelegate, this.onGetAllPlayersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyCsharp.ServiceReference1.ILobbyService.BeginAddNewPlayer(int PlayerId, string PlayerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNewPlayer(PlayerId, PlayerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LobbyCsharp.ServiceReference1.ILobbyService.EndAddNewPlayer(System.IAsyncResult result) {
            base.Channel.EndAddNewPlayer(result);
        }
        
        private System.IAsyncResult OnBeginAddNewPlayer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int PlayerId = ((int)(inValues[0]));
            string PlayerName = ((string)(inValues[1]));
            return ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).BeginAddNewPlayer(PlayerId, PlayerName, callback, asyncState);
        }
        
        private object[] OnEndAddNewPlayer(System.IAsyncResult result) {
            ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).EndAddNewPlayer(result);
            return null;
        }
        
        private void OnAddNewPlayerCompleted(object state) {
            if ((this.AddNewPlayerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNewPlayerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNewPlayerAsync(int PlayerId, string PlayerName) {
            this.AddNewPlayerAsync(PlayerId, PlayerName, null);
        }
        
        public void AddNewPlayerAsync(int PlayerId, string PlayerName, object userState) {
            if ((this.onBeginAddNewPlayerDelegate == null)) {
                this.onBeginAddNewPlayerDelegate = new BeginOperationDelegate(this.OnBeginAddNewPlayer);
            }
            if ((this.onEndAddNewPlayerDelegate == null)) {
                this.onEndAddNewPlayerDelegate = new EndOperationDelegate(this.OnEndAddNewPlayer);
            }
            if ((this.onAddNewPlayerCompletedDelegate == null)) {
                this.onAddNewPlayerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNewPlayerCompleted);
            }
            base.InvokeAsync(this.onBeginAddNewPlayerDelegate, new object[] {
                        PlayerId,
                        PlayerName}, this.onEndAddNewPlayerDelegate, this.onAddNewPlayerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LobbyCsharp.ServiceReference1.ILobbyService.BeginNewId(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNewId(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int LobbyCsharp.ServiceReference1.ILobbyService.EndNewId(System.IAsyncResult result) {
            return base.Channel.EndNewId(result);
        }
        
        private System.IAsyncResult OnBeginNewId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).BeginNewId(callback, asyncState);
        }
        
        private object[] OnEndNewId(System.IAsyncResult result) {
            int retVal = ((LobbyCsharp.ServiceReference1.ILobbyService)(this)).EndNewId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNewIdCompleted(object state) {
            if ((this.NewIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NewIdCompleted(this, new NewIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NewIdAsync() {
            this.NewIdAsync(null);
        }
        
        public void NewIdAsync(object userState) {
            if ((this.onBeginNewIdDelegate == null)) {
                this.onBeginNewIdDelegate = new BeginOperationDelegate(this.OnBeginNewId);
            }
            if ((this.onEndNewIdDelegate == null)) {
                this.onEndNewIdDelegate = new EndOperationDelegate(this.OnEndNewId);
            }
            if ((this.onNewIdCompletedDelegate == null)) {
                this.onNewIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNewIdCompleted);
            }
            base.InvokeAsync(this.onBeginNewIdDelegate, null, this.onEndNewIdDelegate, this.onNewIdCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override LobbyCsharp.ServiceReference1.ILobbyService CreateChannel() {
            return new LobbyServiceClientChannel(this);
        }
        
        private class LobbyServiceClientChannel : ChannelBase<LobbyCsharp.ServiceReference1.ILobbyService>, LobbyCsharp.ServiceReference1.ILobbyService {
            
            public LobbyServiceClientChannel(System.ServiceModel.ClientBase<LobbyCsharp.ServiceReference1.ILobbyService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAvailableRooms(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAvailableRooms", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobby> EndGetAvailableRooms(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobby> _result = ((System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobby>)(base.EndInvoke("GetAvailableRooms", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreatePlayLobby(LobbyCsharp.ServiceReference1.OPlayer host, int lobby, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = host;
                _args[1] = lobby;
                System.IAsyncResult _result = base.BeginInvoke("CreatePlayLobby", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreatePlayLobby(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreatePlayLobby", _args, result);
            }
            
            public System.IAsyncResult BeginGetAvailableLobbyRooms(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAvailableLobbyRooms", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobbyRoom> EndGetAvailableLobbyRooms(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobbyRoom> _result = ((System.Collections.ObjectModel.ObservableCollection<LobbyCsharp.ServiceReference1.OLobbyRoom>)(base.EndInvoke("GetAvailableLobbyRooms", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscribeToLobbyRoom(LobbyCsharp.ServiceReference1.OPlayer player, int lobby, int host, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = player;
                _args[1] = lobby;
                _args[2] = host;
                System.IAsyncResult _result = base.BeginInvoke("SubscribeToLobbyRoom", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSubscribeToLobbyRoom(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SubscribeToLobbyRoom", _args, result);
            }
            
            public System.IAsyncResult BeginStartPlay(LobbyCsharp.ServiceReference1.OPlayer hostPlayer, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = hostPlayer;
                System.IAsyncResult _result = base.BeginInvoke("StartPlay", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStartPlay(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StartPlay", _args, result);
            }
            
            public System.IAsyncResult BeginGetPlayer(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetPlayer", _args, callback, asyncState);
                return _result;
            }
            
            public LobbyCsharp.ServiceReference1.OPlayer EndGetPlayer(System.IAsyncResult result) {
                object[] _args = new object[0];
                LobbyCsharp.ServiceReference1.OPlayer _result = ((LobbyCsharp.ServiceReference1.OPlayer)(base.EndInvoke("GetPlayer", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendGameUpdate(LobbyCsharp.ServiceReference1.OPlayer player, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = player;
                System.IAsyncResult _result = base.BeginInvoke("SendGameUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public LobbyCsharp.ServiceReference1.GameObject EndSendGameUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                LobbyCsharp.ServiceReference1.GameObject _result = ((LobbyCsharp.ServiceReference1.GameObject)(base.EndInvoke("SendGameUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllPlayers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllPlayers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetAllPlayers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetAllPlayers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddNewPlayer(int PlayerId, string PlayerName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = PlayerId;
                _args[1] = PlayerName;
                System.IAsyncResult _result = base.BeginInvoke("AddNewPlayer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddNewPlayer(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddNewPlayer", _args, result);
            }
            
            public System.IAsyncResult BeginNewId(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("NewId", _args, callback, asyncState);
                return _result;
            }
            
            public int EndNewId(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("NewId", _args, result)));
                return _result;
            }
        }
    }
}
